
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def main():
    
    # GET DATA FROM PRE-EXISITING PREDICTION ALGORITHMS
    df = pd.read_csv('Existing_PrionPredictionModels_MetricScores.tsv', sep='\t')
    
    # GET DATA FROM CURRENT ML MODELS=========================================#
    current_ML_model_files = ['NeuralNetwork_PrionPrediction_cv_results.csv']
    for model_file in current_ML_model_files:
        df = get_best_ML_model_metrics(model_file, df)
    #=========================================================================#
        
    # PLOT MODEL METRICS
    plot_model_metrics(df)
    
        
def plot_model_metrics(df):
    """Generate a bar plot of classifier metrics for each prediction model.
    """
    
    sns.barplot(x='Model', y='Score', data=df, hue='Metric')
    plt.legend(loc=2, bbox_to_anchor=(1,1), handletextpad=0.3, title='Metric')
    plt.xticks(fontname='Arial', fontsize=12)
    plt.yticks(fontname='Arial', fontsize=12)
    plt.xlabel('Prediction Model', fontname='Arial', fontsize=14)
    plt.ylabel('Score', fontname='Arial', fontsize=14)
    plt.ylim(0,1)
    plt.savefig('PrionPredictionModels_MetricScoring.tif', bbox_inches='tight', dpi=600, pil_kwargs={'compression':'tiff_lzw'})
    plt.close()
    
    
def get_best_ML_model_metrics(file, df):
    """Gather the best model metrics (according to highest F1 score) from cv_results data 
    generated by a RandomizedSearchCV.
    Returns:
        df = plotting dictionary with data for new ML model added.
    """
    
    model_type, *remainder = file.split('_')
    data = pd.read_csv(file)
    best_data = data[data['rank_test_f1'] == 1]
    if best_data.shape[0] > 1:
        print(best_data.shape)
        print(file, 'There may be a tie in the F1 scores for the leading models. You should manually check the cv_results file.')
        exit()
        
    else:
        precision_best_model = list(best_data['mean_test_precision'])[0]
        recall_best_model = list(best_data['mean_test_recall'])[0]
        f1_best_model = list(best_data['mean_test_f1'])[0]
        accuracy_best_model = list(best_data['mean_test_accuracy'])[0]
        
        metrics = ['Precision', 'Recall', 'F1 Score', 'Accuracy']
        values = [precision_best_model, recall_best_model, f1_best_model, accuracy_best_model]
        for i, metric in enumerate(metrics):
            value = float(values[i])
            df = pd.concat([df, pd.DataFrame.from_dict({'Model':[model_type], 'Metric':[metric], 'Score':[value]})])
            
    return df
    

if __name__ == '__main__':
    main()